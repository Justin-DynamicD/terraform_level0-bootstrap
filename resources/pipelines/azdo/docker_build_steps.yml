# this template is injected as a list of steps
# this allows it to more easily be injected into existing build processes
#
# the following vars are consumed if present:
# $(version) - allows you to set the specific container version

parameters:
  aws_region: 'us-west-2'
  buildArgs: ''
  buildContext: './'
  buildNamespace: 'ado'
  credentials: 'aws-shared'
  ecrKey: ecr-registry
  jobName: ''
  k8sName: shared_eks_cluster
  name: ''

steps:

  - task: AWSShellScript@1
    displayName: AWS Ecosystem Auth
    inputs:
      awsCredentials: ${{ parameters.credentials }}
      regionName: ${{ parameters.aws_region }}
      scriptType: inline
      inlineScript: |
        TOKEN=$(aws ecr get-login-password --region ${{ parameters.aws_region }})
        aws_accountid=$(aws sts get-caller-identity --query Account --output text)
        aws_ecrurl="$aws_accountid.dkr.ecr.${{ parameters.aws_region }}.amazonaws.com"
        echo "authenticating to ${{ parameters.k8sName }}"
        aws eks --region ${{ parameters.aws_region }} update-kubeconfig --name ${{ parameters.k8sName }}
        echo "updating ECR secret"
        kubectl -n ${{ parameters.buildNamespace }} delete secret ${{ parameters.ecrKey }}
        kubectl -n ${{ parameters.buildNamespace }} create secret docker-registry ${{ parameters.ecrKey }} --docker-server=$aws_ecrurl --docker-username=AWS --docker-password=$TOKEN
        echo "checking for version variable"
        if [ -z ${VERSION+x} ]; then VERSION="latest"; fi
        echo "version: $VERSION"
        echo "##vso[task.setvariable variable=version;]$VERSION"
        echo "##vso[task.setvariable variable=aws_ecrurl;]$aws_ecrurl"
        echo "##vso[task.setvariable variable=aws_accountid;]$aws_accountid"

  - task: AWSShellScript@1
    displayName: Build Container
    inputs:
      awsCredentials: ${{ parameters.credentials }}
      regionName: ${{ parameters.aws_region }}
      scriptType: inline
      inlineScript: |
        cd ${{ parameters.buildContext }}
        kubectl build -n ${{ parameters.buildNamespace }} $PUSH_STRING -t $CONTAINER_BUILD_TAG ${{ parameters.buildArgs }} .
    env:
      CONTAINER_BUILD_TAG: '$(aws_ecrurl)/${{ parameters.name }}:$(version)'
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        PUSH_STRING: ''
      ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        PUSH_STRING: '--push --registry-secret ${{ parameters.ecrKey }}'

  # using AWS creds here is not nessisary, but will make it easier if other things are discovered that need to be deconfigured
  - task: AWSShellScript@1
    displayName: AWS Ecosystem Auth
    condition: always()
    inputs:
      awsCredentials: ${{ parameters.credentials }}
      regionName: ${{ parameters.aws_region }}
      scriptType: inline
      inlineScript: |
        echo "removing ~/.kube"
        rm -rf ~/.kube